#!/usr/bin/python

import urwid
import sys, os, time, string, copy
from threading import Timer
import shlex
import struct
import platform
import subprocess

sleepSecs = 5
prevClientData = None
columnWidth = 9
minSortPointer = 0
maxSortPointer = 12
sortPointer = minSortPointer
headLine = "Node %CPU %Mem MBRead Reads MBWrite Writes Open "
headLine += "Close GAttr SAttr Seek Fsynk DrtHit DrtMis"

numberOfFields = len(string.split(headLine))
maxFieldWidth = 0
for field in string.split(headLine):
    fieldWidth = len(field)
    if fieldWidth > maxFieldWidth:
        maxFieldWidth = fieldWidth
    

palette = [
    ('header','white','dark red'),
    ('body','black','light gray'),
]

############################################################################################
#                                  TERMINAL SIZE 
############################################################################################
def get_terminal_size():
    """ getTerminalSize()
     - get width and height of console
     - works on linux,os x,windows,cygwin(windows)
     originally retrieved from:
     http://stackoverflow.com/questions/566746/how-to-get-console-window-width-in-python
    """
    current_os = platform.system()
    tuple_xy = None
    if current_os == 'Windows':
        tuple_xy = _get_terminal_size_windows()
        if tuple_xy is None:
            tuple_xy = _get_terminal_size_tput()
            # needed for window's python in cygwin's xterm!
    if current_os in ['Linux', 'Darwin'] or current_os.startswith('CYGWIN'):
        tuple_xy = _get_terminal_size_linux()
    if tuple_xy is None:
        print "default"
        tuple_xy = (80, 25)      # default value
    return tuple_xy
 
 
def _get_terminal_size_windows():
    try:
        from ctypes import windll, create_string_buffer
        # stdin handle is -10
        # stdout handle is -11
        # stderr handle is -12
        h = windll.kernel32.GetStdHandle(-12)
        csbi = create_string_buffer(22)
        res = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)
        if res:
            (bufx, bufy, curx, cury, wattr,
             left, top, right, bottom,
             maxx, maxy) = struct.unpack("hhhhHhhhhhh", csbi.raw)
            sizex = right - left + 1
            sizey = bottom - top + 1
            return sizex, sizey
    except:
        pass
 

def _get_terminal_size_tput():
    # get terminal width
    # src: http://stackoverflow.com/questions/263890/how-do-i-find-the-width-height-of-a-terminal-window
    try:
        cols = int(subprocess.check_call(shlex.split('tput cols')))
        rows = int(subprocess.check_call(shlex.split('tput lines')))
        return (cols, rows)
    except:
        pass
 
 
def _get_terminal_size_linux():
    def ioctl_GWINSZ(fd):
        try:
            import fcntl
            import termios
            cr = struct.unpack('hh',
                               fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
            return cr
        except:
            pass
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        try:
            cr = (os.environ['LINES'], os.environ['COLUMNS'])
        except:
            return None
    return int(cr[1]), int(cr[0])

############################################################################################
#                                  CEREBRO FUNCTIONS
############################################################################################

def getClientData():
    clientData = []
    numCol = 0

    for line in os.popen("lcmtstats").readlines():
        dataList = []
        ncol = 0
        for data in string.split(line.strip(), sep = ";"):
            if ncol == 0:
                dataList.append(data)
            elif ncol <= 2:
                dataList.append(float(data))
            else:
                dataList.append(int(data))
            ncol += 1
        clientData.append(dataList)

    clientData = sorted(clientData, reverse=False, key = lambda client: client[numCol])

    return clientData

def getPrevData(prevClientData, nodeName):
    prevData = None
    for data in prevClientData:
        if data[0] == nodeName:
            prevData = data
            break
    return prevData

def calcDataColumns(clientData, prevClientData, sortPointer):
    dataColumns = []
    reverseOrder = True

    for data in clientData:
        diffList = []
        prevData = getPrevData(prevClientData, data[0])
        for i in range(len(data)):
            if i <= 2:
                diffList.append(data[i])
            else:
                dataDiff = (data[i] - prevData[i])
                if i == 3 or i == 5: 
                    diffList.append(dataDiff / (1024 * 1024))
                else:
                    diffList.append(dataDiff)
        dataColumns.append(diffList)

    if sortPointer == 0: reverseOrder = False

    dataColumns = sorted(dataColumns, reverse = reverseOrder, 
                         key = lambda client: client[sortPointer])

    return dataColumns

def calcColumnWidth():
    global numberOfFields, maxFieldWidth
    global columnWidth, headLine

    windowColumns, windowRows = get_terminal_size()
    columnWidth = maxFieldWidth + 1
    totalWidth = columnWidth * numberOfFields
    spareWidth = (windowColumns - totalWidth) / numberOfFields
    columnWidth += spareWidth
    
############################################################################################
#                                  CURSES FUNCTIONS
############################################################################################

def getBodyRows(sortPointer):
    global prevClientData
    global columnWidth
    bodyRows = ""

    clientData = getClientData()
    dataColumns = calcDataColumns(clientData, prevClientData, sortPointer)
    prevClientData = copy.deepcopy(clientData)

    for dataLine in dataColumns:
        numCol = 0
        for data in dataLine:
            if numCol == 0:
                dataStr = data
            elif numCol <= 2:
                dataStr = "%.2f" % data
            else:
                dataStr = str(data)
            numCol += 1
            numSpaces = columnWidth - len(dataStr)
            bodyRows += dataStr + numSpaces * " "
        bodyRows += "\n"

    return bodyRows 

def getHeaderRows(sortPointer):
    global columnWidth, sleepSecs, headLine
    numCol = 0
    headerRows = "LEFT -> switch order column left; "
    headerRows += "RIGHT -> switch order column right; "
    headerRows += "R -> refresh (%d secs)\n" % sleepSecs

    for name in string.split(headLine, sep = " "):
        numSpaces = columnWidth - len(name)
        if numCol == sortPointer:
            markPointer = "<"
            numSpaces -= 1
        else:
            markPointer = ""
        numCol += 1
        headerRows += name + markPointer + numSpaces * " "

    return headerRows

def unhandledInput(key):
    global sortPointer, minSortPointer, maxSortPointer
    global headerText, bodyText

    if key in ('q', 'Q'):
        raise urwid.ExitMainLoop()
    elif key in ('r', 'R'):
        bodyRows = getBodyRows(sortPointer)
        bodyText.set_text(bodyRows)
    elif key in ('left'):
        if sortPointer == minSortPointer:
            sortPointer = maxSortPointer
        else:
            sortPointer -= 1
        headerRows = getHeaderRows(sortPointer)
        headerText.set_text(headerRows)
        bodyRows = getBodyRows(sortPointer)
        bodyText.set_text(bodyRows)
    elif key in ('right'):
        if sortPointer == maxSortPointer:
            sortPointer = minSortPointer
        else:
            sortPointer += 1
        headerRows = getHeaderRows(sortPointer)
        headerText.set_text(headerRows)
        bodyRows = getBodyRows(sortPointer)
        bodyText.set_text(bodyRows)

def doRefresh(_loop,_data): 
    global sortPointer, bodyText

    calcColumnWidth()
    headerRows = getHeaderRows(sortPointer)
    headerText.set_text(headerRows)
    bodyRows = getBodyRows(sortPointer)
    bodyText.set_text(bodyRows)
    _loop.set_alarm_in(sleepSecs, doRefresh)


calcColumnWidth()

prevClientData = getClientData()
sys.stdout.write("Waiting %d secconds to start..." % sleepSecs)
sys.stdout.flush()
time.sleep(sleepSecs)    
print "Done"

headerRows = getHeaderRows(sortPointer)
headerText = urwid.Text(headerRows, align='left')

bodyRows = getBodyRows(sortPointer)
bodyText = urwid.Text(bodyRows, align='left')

listbox = urwid.ListBox(urwid.SimpleListWalker([bodyText]))
headerWrap = urwid.AttrWrap(headerText, 'header')
frame = urwid.Frame(urwid.AttrWrap(listbox, 'body'), header = headerWrap)

screen = urwid.raw_display.Screen()

loop = urwid.MainLoop(frame, palette, screen, unhandled_input = unhandledInput)
loop.set_alarm_in(sleepSecs, doRefresh)
loop.run()

